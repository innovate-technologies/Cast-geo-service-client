/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.geo.GeoInfoReply', null, global);
goog.exportSymbol('proto.geo.GeoInfoReply.CITY', null, global);
goog.exportSymbol('proto.geo.GeoInfoReply.CONTINENT', null, global);
goog.exportSymbol('proto.geo.GeoInfoReply.COUNTRY', null, global);
goog.exportSymbol('proto.geo.GeoInfoReply.LOCATION', null, global);
goog.exportSymbol('proto.geo.GeoInfoReply.NAMES', null, global);
goog.exportSymbol('proto.geo.GeoInfoReply.POSTAL', null, global);
goog.exportSymbol('proto.geo.GeoInfoReply.REGISTERED_COUNTRY', null, global);
goog.exportSymbol('proto.geo.GeoInfoReply.SUBDIVISIONS', null, global);
goog.exportSymbol('proto.geo.GeoInfoRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.geo.GeoInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.geo.GeoInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.geo.GeoInfoRequest.displayName = 'proto.geo.GeoInfoRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.geo.GeoInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.geo.GeoInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.geo.GeoInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geo.GeoInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    ip: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.geo.GeoInfoRequest}
 */
proto.geo.GeoInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.geo.GeoInfoRequest;
  return proto.geo.GeoInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.geo.GeoInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.geo.GeoInfoRequest}
 */
proto.geo.GeoInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.geo.GeoInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.geo.GeoInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.geo.GeoInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geo.GeoInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string ip = 1;
 * @return {string}
 */
proto.geo.GeoInfoRequest.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.geo.GeoInfoRequest.prototype.setIp = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.geo.GeoInfoReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.geo.GeoInfoReply.repeatedFields_, null);
};
goog.inherits(proto.geo.GeoInfoReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.geo.GeoInfoReply.displayName = 'proto.geo.GeoInfoReply';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.geo.GeoInfoReply.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.geo.GeoInfoReply.prototype.toObject = function(opt_includeInstance) {
  return proto.geo.GeoInfoReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.geo.GeoInfoReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geo.GeoInfoReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    city: (f = msg.getCity()) && proto.geo.GeoInfoReply.CITY.toObject(includeInstance, f),
    continent: (f = msg.getContinent()) && proto.geo.GeoInfoReply.CONTINENT.toObject(includeInstance, f),
    country: (f = msg.getCountry()) && proto.geo.GeoInfoReply.COUNTRY.toObject(includeInstance, f),
    location: (f = msg.getLocation()) && proto.geo.GeoInfoReply.LOCATION.toObject(includeInstance, f),
    postal: (f = msg.getPostal()) && proto.geo.GeoInfoReply.POSTAL.toObject(includeInstance, f),
    registeredCountry: (f = msg.getRegisteredCountry()) && proto.geo.GeoInfoReply.REGISTERED_COUNTRY.toObject(includeInstance, f),
    subdivisionsList: jspb.Message.toObjectList(msg.getSubdivisionsList(),
    proto.geo.GeoInfoReply.SUBDIVISIONS.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.geo.GeoInfoReply}
 */
proto.geo.GeoInfoReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.geo.GeoInfoReply;
  return proto.geo.GeoInfoReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.geo.GeoInfoReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.geo.GeoInfoReply}
 */
proto.geo.GeoInfoReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.geo.GeoInfoReply.CITY;
      reader.readMessage(value,proto.geo.GeoInfoReply.CITY.deserializeBinaryFromReader);
      msg.setCity(value);
      break;
    case 2:
      var value = new proto.geo.GeoInfoReply.CONTINENT;
      reader.readMessage(value,proto.geo.GeoInfoReply.CONTINENT.deserializeBinaryFromReader);
      msg.setContinent(value);
      break;
    case 3:
      var value = new proto.geo.GeoInfoReply.COUNTRY;
      reader.readMessage(value,proto.geo.GeoInfoReply.COUNTRY.deserializeBinaryFromReader);
      msg.setCountry(value);
      break;
    case 4:
      var value = new proto.geo.GeoInfoReply.LOCATION;
      reader.readMessage(value,proto.geo.GeoInfoReply.LOCATION.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 5:
      var value = new proto.geo.GeoInfoReply.POSTAL;
      reader.readMessage(value,proto.geo.GeoInfoReply.POSTAL.deserializeBinaryFromReader);
      msg.setPostal(value);
      break;
    case 6:
      var value = new proto.geo.GeoInfoReply.REGISTERED_COUNTRY;
      reader.readMessage(value,proto.geo.GeoInfoReply.REGISTERED_COUNTRY.deserializeBinaryFromReader);
      msg.setRegisteredCountry(value);
      break;
    case 7:
      var value = new proto.geo.GeoInfoReply.SUBDIVISIONS;
      reader.readMessage(value,proto.geo.GeoInfoReply.SUBDIVISIONS.deserializeBinaryFromReader);
      msg.addSubdivisions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.geo.GeoInfoReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.geo.GeoInfoReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.geo.GeoInfoReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geo.GeoInfoReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.geo.GeoInfoReply.CITY.serializeBinaryToWriter
    );
  }
  f = message.getContinent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.geo.GeoInfoReply.CONTINENT.serializeBinaryToWriter
    );
  }
  f = message.getCountry();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.geo.GeoInfoReply.COUNTRY.serializeBinaryToWriter
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.geo.GeoInfoReply.LOCATION.serializeBinaryToWriter
    );
  }
  f = message.getPostal();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.geo.GeoInfoReply.POSTAL.serializeBinaryToWriter
    );
  }
  f = message.getRegisteredCountry();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.geo.GeoInfoReply.REGISTERED_COUNTRY.serializeBinaryToWriter
    );
  }
  f = message.getSubdivisionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.geo.GeoInfoReply.SUBDIVISIONS.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.geo.GeoInfoReply.NAMES = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.geo.GeoInfoReply.NAMES, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.geo.GeoInfoReply.NAMES.displayName = 'proto.geo.GeoInfoReply.NAMES';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.geo.GeoInfoReply.NAMES.prototype.toObject = function(opt_includeInstance) {
  return proto.geo.GeoInfoReply.NAMES.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.geo.GeoInfoReply.NAMES} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geo.GeoInfoReply.NAMES.toObject = function(includeInstance, msg) {
  var f, obj = {
    de: jspb.Message.getFieldWithDefault(msg, 1, ""),
    en: jspb.Message.getFieldWithDefault(msg, 2, ""),
    es: jspb.Message.getFieldWithDefault(msg, 3, ""),
    fr: jspb.Message.getFieldWithDefault(msg, 4, ""),
    ja: jspb.Message.getFieldWithDefault(msg, 5, ""),
    pt: jspb.Message.getFieldWithDefault(msg, 6, ""),
    ru: jspb.Message.getFieldWithDefault(msg, 7, ""),
    zh: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.geo.GeoInfoReply.NAMES}
 */
proto.geo.GeoInfoReply.NAMES.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.geo.GeoInfoReply.NAMES;
  return proto.geo.GeoInfoReply.NAMES.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.geo.GeoInfoReply.NAMES} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.geo.GeoInfoReply.NAMES}
 */
proto.geo.GeoInfoReply.NAMES.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDe(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEn(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEs(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFr(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setJa(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPt(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setRu(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setZh(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.geo.GeoInfoReply.NAMES.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.geo.GeoInfoReply.NAMES.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.geo.GeoInfoReply.NAMES} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geo.GeoInfoReply.NAMES.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDe();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEn();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEs();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFr();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getJa();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPt();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getRu();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getZh();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string de = 1;
 * @return {string}
 */
proto.geo.GeoInfoReply.NAMES.prototype.getDe = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.geo.GeoInfoReply.NAMES.prototype.setDe = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string en = 2;
 * @return {string}
 */
proto.geo.GeoInfoReply.NAMES.prototype.getEn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.geo.GeoInfoReply.NAMES.prototype.setEn = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string es = 3;
 * @return {string}
 */
proto.geo.GeoInfoReply.NAMES.prototype.getEs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.geo.GeoInfoReply.NAMES.prototype.setEs = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string fr = 4;
 * @return {string}
 */
proto.geo.GeoInfoReply.NAMES.prototype.getFr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.geo.GeoInfoReply.NAMES.prototype.setFr = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string ja = 5;
 * @return {string}
 */
proto.geo.GeoInfoReply.NAMES.prototype.getJa = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.geo.GeoInfoReply.NAMES.prototype.setJa = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string pt = 6;
 * @return {string}
 */
proto.geo.GeoInfoReply.NAMES.prototype.getPt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.geo.GeoInfoReply.NAMES.prototype.setPt = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string ru = 7;
 * @return {string}
 */
proto.geo.GeoInfoReply.NAMES.prototype.getRu = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.geo.GeoInfoReply.NAMES.prototype.setRu = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string zh = 8;
 * @return {string}
 */
proto.geo.GeoInfoReply.NAMES.prototype.getZh = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.geo.GeoInfoReply.NAMES.prototype.setZh = function(value) {
  jspb.Message.setField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.geo.GeoInfoReply.CITY = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.geo.GeoInfoReply.CITY, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.geo.GeoInfoReply.CITY.displayName = 'proto.geo.GeoInfoReply.CITY';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.geo.GeoInfoReply.CITY.prototype.toObject = function(opt_includeInstance) {
  return proto.geo.GeoInfoReply.CITY.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.geo.GeoInfoReply.CITY} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geo.GeoInfoReply.CITY.toObject = function(includeInstance, msg) {
  var f, obj = {
    geonameId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    names: (f = msg.getNames()) && proto.geo.GeoInfoReply.NAMES.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.geo.GeoInfoReply.CITY}
 */
proto.geo.GeoInfoReply.CITY.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.geo.GeoInfoReply.CITY;
  return proto.geo.GeoInfoReply.CITY.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.geo.GeoInfoReply.CITY} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.geo.GeoInfoReply.CITY}
 */
proto.geo.GeoInfoReply.CITY.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGeonameId(value);
      break;
    case 2:
      var value = new proto.geo.GeoInfoReply.NAMES;
      reader.readMessage(value,proto.geo.GeoInfoReply.NAMES.deserializeBinaryFromReader);
      msg.setNames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.geo.GeoInfoReply.CITY.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.geo.GeoInfoReply.CITY.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.geo.GeoInfoReply.CITY} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geo.GeoInfoReply.CITY.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGeonameId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getNames();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.geo.GeoInfoReply.NAMES.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 geoname_id = 1;
 * @return {number}
 */
proto.geo.GeoInfoReply.CITY.prototype.getGeonameId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.geo.GeoInfoReply.CITY.prototype.setGeonameId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional NAMES names = 2;
 * @return {?proto.geo.GeoInfoReply.NAMES}
 */
proto.geo.GeoInfoReply.CITY.prototype.getNames = function() {
  return /** @type{?proto.geo.GeoInfoReply.NAMES} */ (
    jspb.Message.getWrapperField(this, proto.geo.GeoInfoReply.NAMES, 2));
};


/** @param {?proto.geo.GeoInfoReply.NAMES|undefined} value */
proto.geo.GeoInfoReply.CITY.prototype.setNames = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.geo.GeoInfoReply.CITY.prototype.clearNames = function() {
  this.setNames(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geo.GeoInfoReply.CITY.prototype.hasNames = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.geo.GeoInfoReply.CONTINENT = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.geo.GeoInfoReply.CONTINENT, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.geo.GeoInfoReply.CONTINENT.displayName = 'proto.geo.GeoInfoReply.CONTINENT';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.geo.GeoInfoReply.CONTINENT.prototype.toObject = function(opt_includeInstance) {
  return proto.geo.GeoInfoReply.CONTINENT.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.geo.GeoInfoReply.CONTINENT} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geo.GeoInfoReply.CONTINENT.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, ""),
    geonameId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    names: (f = msg.getNames()) && proto.geo.GeoInfoReply.NAMES.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.geo.GeoInfoReply.CONTINENT}
 */
proto.geo.GeoInfoReply.CONTINENT.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.geo.GeoInfoReply.CONTINENT;
  return proto.geo.GeoInfoReply.CONTINENT.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.geo.GeoInfoReply.CONTINENT} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.geo.GeoInfoReply.CONTINENT}
 */
proto.geo.GeoInfoReply.CONTINENT.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGeonameId(value);
      break;
    case 3:
      var value = new proto.geo.GeoInfoReply.NAMES;
      reader.readMessage(value,proto.geo.GeoInfoReply.NAMES.deserializeBinaryFromReader);
      msg.setNames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.geo.GeoInfoReply.CONTINENT.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.geo.GeoInfoReply.CONTINENT.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.geo.GeoInfoReply.CONTINENT} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geo.GeoInfoReply.CONTINENT.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGeonameId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getNames();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.geo.GeoInfoReply.NAMES.serializeBinaryToWriter
    );
  }
};


/**
 * optional string code = 1;
 * @return {string}
 */
proto.geo.GeoInfoReply.CONTINENT.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.geo.GeoInfoReply.CONTINENT.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint64 geoname_id = 2;
 * @return {number}
 */
proto.geo.GeoInfoReply.CONTINENT.prototype.getGeonameId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.geo.GeoInfoReply.CONTINENT.prototype.setGeonameId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional NAMES names = 3;
 * @return {?proto.geo.GeoInfoReply.NAMES}
 */
proto.geo.GeoInfoReply.CONTINENT.prototype.getNames = function() {
  return /** @type{?proto.geo.GeoInfoReply.NAMES} */ (
    jspb.Message.getWrapperField(this, proto.geo.GeoInfoReply.NAMES, 3));
};


/** @param {?proto.geo.GeoInfoReply.NAMES|undefined} value */
proto.geo.GeoInfoReply.CONTINENT.prototype.setNames = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.geo.GeoInfoReply.CONTINENT.prototype.clearNames = function() {
  this.setNames(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geo.GeoInfoReply.CONTINENT.prototype.hasNames = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.geo.GeoInfoReply.COUNTRY = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.geo.GeoInfoReply.COUNTRY, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.geo.GeoInfoReply.COUNTRY.displayName = 'proto.geo.GeoInfoReply.COUNTRY';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.geo.GeoInfoReply.COUNTRY.prototype.toObject = function(opt_includeInstance) {
  return proto.geo.GeoInfoReply.COUNTRY.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.geo.GeoInfoReply.COUNTRY} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geo.GeoInfoReply.COUNTRY.toObject = function(includeInstance, msg) {
  var f, obj = {
    geonameId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    isInEuropeanUnion: jspb.Message.getFieldWithDefault(msg, 2, false),
    isoCode: jspb.Message.getFieldWithDefault(msg, 3, ""),
    names: (f = msg.getNames()) && proto.geo.GeoInfoReply.NAMES.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.geo.GeoInfoReply.COUNTRY}
 */
proto.geo.GeoInfoReply.COUNTRY.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.geo.GeoInfoReply.COUNTRY;
  return proto.geo.GeoInfoReply.COUNTRY.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.geo.GeoInfoReply.COUNTRY} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.geo.GeoInfoReply.COUNTRY}
 */
proto.geo.GeoInfoReply.COUNTRY.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGeonameId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsInEuropeanUnion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIsoCode(value);
      break;
    case 4:
      var value = new proto.geo.GeoInfoReply.NAMES;
      reader.readMessage(value,proto.geo.GeoInfoReply.NAMES.deserializeBinaryFromReader);
      msg.setNames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.geo.GeoInfoReply.COUNTRY.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.geo.GeoInfoReply.COUNTRY.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.geo.GeoInfoReply.COUNTRY} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geo.GeoInfoReply.COUNTRY.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGeonameId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getIsInEuropeanUnion();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getIsoCode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNames();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.geo.GeoInfoReply.NAMES.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 geoname_id = 1;
 * @return {number}
 */
proto.geo.GeoInfoReply.COUNTRY.prototype.getGeonameId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.geo.GeoInfoReply.COUNTRY.prototype.setGeonameId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool is_in_european_union = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.geo.GeoInfoReply.COUNTRY.prototype.getIsInEuropeanUnion = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.geo.GeoInfoReply.COUNTRY.prototype.setIsInEuropeanUnion = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string iso_code = 3;
 * @return {string}
 */
proto.geo.GeoInfoReply.COUNTRY.prototype.getIsoCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.geo.GeoInfoReply.COUNTRY.prototype.setIsoCode = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional NAMES names = 4;
 * @return {?proto.geo.GeoInfoReply.NAMES}
 */
proto.geo.GeoInfoReply.COUNTRY.prototype.getNames = function() {
  return /** @type{?proto.geo.GeoInfoReply.NAMES} */ (
    jspb.Message.getWrapperField(this, proto.geo.GeoInfoReply.NAMES, 4));
};


/** @param {?proto.geo.GeoInfoReply.NAMES|undefined} value */
proto.geo.GeoInfoReply.COUNTRY.prototype.setNames = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.geo.GeoInfoReply.COUNTRY.prototype.clearNames = function() {
  this.setNames(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geo.GeoInfoReply.COUNTRY.prototype.hasNames = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.geo.GeoInfoReply.LOCATION = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.geo.GeoInfoReply.LOCATION, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.geo.GeoInfoReply.LOCATION.displayName = 'proto.geo.GeoInfoReply.LOCATION';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.geo.GeoInfoReply.LOCATION.prototype.toObject = function(opt_includeInstance) {
  return proto.geo.GeoInfoReply.LOCATION.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.geo.GeoInfoReply.LOCATION} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geo.GeoInfoReply.LOCATION.toObject = function(includeInstance, msg) {
  var f, obj = {
    accuracyRadius: jspb.Message.getFieldWithDefault(msg, 1, 0),
    latitude: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    longitude: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    timeZone: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.geo.GeoInfoReply.LOCATION}
 */
proto.geo.GeoInfoReply.LOCATION.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.geo.GeoInfoReply.LOCATION;
  return proto.geo.GeoInfoReply.LOCATION.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.geo.GeoInfoReply.LOCATION} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.geo.GeoInfoReply.LOCATION}
 */
proto.geo.GeoInfoReply.LOCATION.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAccuracyRadius(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLatitude(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongitude(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimeZone(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.geo.GeoInfoReply.LOCATION.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.geo.GeoInfoReply.LOCATION.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.geo.GeoInfoReply.LOCATION} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geo.GeoInfoReply.LOCATION.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccuracyRadius();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getLatitude();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getLongitude();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getTimeZone();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint32 accuracy_radius = 1;
 * @return {number}
 */
proto.geo.GeoInfoReply.LOCATION.prototype.getAccuracyRadius = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.geo.GeoInfoReply.LOCATION.prototype.setAccuracyRadius = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional double latitude = 2;
 * @return {number}
 */
proto.geo.GeoInfoReply.LOCATION.prototype.getLatitude = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.geo.GeoInfoReply.LOCATION.prototype.setLatitude = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional double longitude = 3;
 * @return {number}
 */
proto.geo.GeoInfoReply.LOCATION.prototype.getLongitude = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.geo.GeoInfoReply.LOCATION.prototype.setLongitude = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string time_zone = 4;
 * @return {string}
 */
proto.geo.GeoInfoReply.LOCATION.prototype.getTimeZone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.geo.GeoInfoReply.LOCATION.prototype.setTimeZone = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.geo.GeoInfoReply.POSTAL = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.geo.GeoInfoReply.POSTAL, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.geo.GeoInfoReply.POSTAL.displayName = 'proto.geo.GeoInfoReply.POSTAL';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.geo.GeoInfoReply.POSTAL.prototype.toObject = function(opt_includeInstance) {
  return proto.geo.GeoInfoReply.POSTAL.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.geo.GeoInfoReply.POSTAL} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geo.GeoInfoReply.POSTAL.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.geo.GeoInfoReply.POSTAL}
 */
proto.geo.GeoInfoReply.POSTAL.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.geo.GeoInfoReply.POSTAL;
  return proto.geo.GeoInfoReply.POSTAL.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.geo.GeoInfoReply.POSTAL} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.geo.GeoInfoReply.POSTAL}
 */
proto.geo.GeoInfoReply.POSTAL.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.geo.GeoInfoReply.POSTAL.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.geo.GeoInfoReply.POSTAL.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.geo.GeoInfoReply.POSTAL} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geo.GeoInfoReply.POSTAL.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string code = 1;
 * @return {string}
 */
proto.geo.GeoInfoReply.POSTAL.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.geo.GeoInfoReply.POSTAL.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.geo.GeoInfoReply.REGISTERED_COUNTRY = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.geo.GeoInfoReply.REGISTERED_COUNTRY, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.geo.GeoInfoReply.REGISTERED_COUNTRY.displayName = 'proto.geo.GeoInfoReply.REGISTERED_COUNTRY';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.geo.GeoInfoReply.REGISTERED_COUNTRY.prototype.toObject = function(opt_includeInstance) {
  return proto.geo.GeoInfoReply.REGISTERED_COUNTRY.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.geo.GeoInfoReply.REGISTERED_COUNTRY} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geo.GeoInfoReply.REGISTERED_COUNTRY.toObject = function(includeInstance, msg) {
  var f, obj = {
    geonameId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    isInEuropeanUnion: jspb.Message.getFieldWithDefault(msg, 2, false),
    isoCode: jspb.Message.getFieldWithDefault(msg, 3, ""),
    names: (f = msg.getNames()) && proto.geo.GeoInfoReply.NAMES.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.geo.GeoInfoReply.REGISTERED_COUNTRY}
 */
proto.geo.GeoInfoReply.REGISTERED_COUNTRY.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.geo.GeoInfoReply.REGISTERED_COUNTRY;
  return proto.geo.GeoInfoReply.REGISTERED_COUNTRY.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.geo.GeoInfoReply.REGISTERED_COUNTRY} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.geo.GeoInfoReply.REGISTERED_COUNTRY}
 */
proto.geo.GeoInfoReply.REGISTERED_COUNTRY.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGeonameId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsInEuropeanUnion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIsoCode(value);
      break;
    case 4:
      var value = new proto.geo.GeoInfoReply.NAMES;
      reader.readMessage(value,proto.geo.GeoInfoReply.NAMES.deserializeBinaryFromReader);
      msg.setNames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.geo.GeoInfoReply.REGISTERED_COUNTRY.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.geo.GeoInfoReply.REGISTERED_COUNTRY.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.geo.GeoInfoReply.REGISTERED_COUNTRY} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geo.GeoInfoReply.REGISTERED_COUNTRY.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGeonameId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getIsInEuropeanUnion();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getIsoCode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNames();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.geo.GeoInfoReply.NAMES.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 geoname_id = 1;
 * @return {number}
 */
proto.geo.GeoInfoReply.REGISTERED_COUNTRY.prototype.getGeonameId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.geo.GeoInfoReply.REGISTERED_COUNTRY.prototype.setGeonameId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool is_in_european_union = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.geo.GeoInfoReply.REGISTERED_COUNTRY.prototype.getIsInEuropeanUnion = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.geo.GeoInfoReply.REGISTERED_COUNTRY.prototype.setIsInEuropeanUnion = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string iso_code = 3;
 * @return {string}
 */
proto.geo.GeoInfoReply.REGISTERED_COUNTRY.prototype.getIsoCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.geo.GeoInfoReply.REGISTERED_COUNTRY.prototype.setIsoCode = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional NAMES names = 4;
 * @return {?proto.geo.GeoInfoReply.NAMES}
 */
proto.geo.GeoInfoReply.REGISTERED_COUNTRY.prototype.getNames = function() {
  return /** @type{?proto.geo.GeoInfoReply.NAMES} */ (
    jspb.Message.getWrapperField(this, proto.geo.GeoInfoReply.NAMES, 4));
};


/** @param {?proto.geo.GeoInfoReply.NAMES|undefined} value */
proto.geo.GeoInfoReply.REGISTERED_COUNTRY.prototype.setNames = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.geo.GeoInfoReply.REGISTERED_COUNTRY.prototype.clearNames = function() {
  this.setNames(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geo.GeoInfoReply.REGISTERED_COUNTRY.prototype.hasNames = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.geo.GeoInfoReply.SUBDIVISIONS = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.geo.GeoInfoReply.SUBDIVISIONS, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.geo.GeoInfoReply.SUBDIVISIONS.displayName = 'proto.geo.GeoInfoReply.SUBDIVISIONS';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.geo.GeoInfoReply.SUBDIVISIONS.prototype.toObject = function(opt_includeInstance) {
  return proto.geo.GeoInfoReply.SUBDIVISIONS.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.geo.GeoInfoReply.SUBDIVISIONS} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geo.GeoInfoReply.SUBDIVISIONS.toObject = function(includeInstance, msg) {
  var f, obj = {
    geonameId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    isoCode: jspb.Message.getFieldWithDefault(msg, 2, ""),
    names: (f = msg.getNames()) && proto.geo.GeoInfoReply.NAMES.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.geo.GeoInfoReply.SUBDIVISIONS}
 */
proto.geo.GeoInfoReply.SUBDIVISIONS.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.geo.GeoInfoReply.SUBDIVISIONS;
  return proto.geo.GeoInfoReply.SUBDIVISIONS.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.geo.GeoInfoReply.SUBDIVISIONS} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.geo.GeoInfoReply.SUBDIVISIONS}
 */
proto.geo.GeoInfoReply.SUBDIVISIONS.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGeonameId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIsoCode(value);
      break;
    case 3:
      var value = new proto.geo.GeoInfoReply.NAMES;
      reader.readMessage(value,proto.geo.GeoInfoReply.NAMES.deserializeBinaryFromReader);
      msg.setNames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.geo.GeoInfoReply.SUBDIVISIONS.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.geo.GeoInfoReply.SUBDIVISIONS.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.geo.GeoInfoReply.SUBDIVISIONS} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.geo.GeoInfoReply.SUBDIVISIONS.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGeonameId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getIsoCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNames();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.geo.GeoInfoReply.NAMES.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 geoname_id = 1;
 * @return {number}
 */
proto.geo.GeoInfoReply.SUBDIVISIONS.prototype.getGeonameId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.geo.GeoInfoReply.SUBDIVISIONS.prototype.setGeonameId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string iso_code = 2;
 * @return {string}
 */
proto.geo.GeoInfoReply.SUBDIVISIONS.prototype.getIsoCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.geo.GeoInfoReply.SUBDIVISIONS.prototype.setIsoCode = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional NAMES names = 3;
 * @return {?proto.geo.GeoInfoReply.NAMES}
 */
proto.geo.GeoInfoReply.SUBDIVISIONS.prototype.getNames = function() {
  return /** @type{?proto.geo.GeoInfoReply.NAMES} */ (
    jspb.Message.getWrapperField(this, proto.geo.GeoInfoReply.NAMES, 3));
};


/** @param {?proto.geo.GeoInfoReply.NAMES|undefined} value */
proto.geo.GeoInfoReply.SUBDIVISIONS.prototype.setNames = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.geo.GeoInfoReply.SUBDIVISIONS.prototype.clearNames = function() {
  this.setNames(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geo.GeoInfoReply.SUBDIVISIONS.prototype.hasNames = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional CITY city = 1;
 * @return {?proto.geo.GeoInfoReply.CITY}
 */
proto.geo.GeoInfoReply.prototype.getCity = function() {
  return /** @type{?proto.geo.GeoInfoReply.CITY} */ (
    jspb.Message.getWrapperField(this, proto.geo.GeoInfoReply.CITY, 1));
};


/** @param {?proto.geo.GeoInfoReply.CITY|undefined} value */
proto.geo.GeoInfoReply.prototype.setCity = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.geo.GeoInfoReply.prototype.clearCity = function() {
  this.setCity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geo.GeoInfoReply.prototype.hasCity = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CONTINENT continent = 2;
 * @return {?proto.geo.GeoInfoReply.CONTINENT}
 */
proto.geo.GeoInfoReply.prototype.getContinent = function() {
  return /** @type{?proto.geo.GeoInfoReply.CONTINENT} */ (
    jspb.Message.getWrapperField(this, proto.geo.GeoInfoReply.CONTINENT, 2));
};


/** @param {?proto.geo.GeoInfoReply.CONTINENT|undefined} value */
proto.geo.GeoInfoReply.prototype.setContinent = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.geo.GeoInfoReply.prototype.clearContinent = function() {
  this.setContinent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geo.GeoInfoReply.prototype.hasContinent = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional COUNTRY country = 3;
 * @return {?proto.geo.GeoInfoReply.COUNTRY}
 */
proto.geo.GeoInfoReply.prototype.getCountry = function() {
  return /** @type{?proto.geo.GeoInfoReply.COUNTRY} */ (
    jspb.Message.getWrapperField(this, proto.geo.GeoInfoReply.COUNTRY, 3));
};


/** @param {?proto.geo.GeoInfoReply.COUNTRY|undefined} value */
proto.geo.GeoInfoReply.prototype.setCountry = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.geo.GeoInfoReply.prototype.clearCountry = function() {
  this.setCountry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geo.GeoInfoReply.prototype.hasCountry = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional LOCATION location = 4;
 * @return {?proto.geo.GeoInfoReply.LOCATION}
 */
proto.geo.GeoInfoReply.prototype.getLocation = function() {
  return /** @type{?proto.geo.GeoInfoReply.LOCATION} */ (
    jspb.Message.getWrapperField(this, proto.geo.GeoInfoReply.LOCATION, 4));
};


/** @param {?proto.geo.GeoInfoReply.LOCATION|undefined} value */
proto.geo.GeoInfoReply.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.geo.GeoInfoReply.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geo.GeoInfoReply.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional POSTAL postal = 5;
 * @return {?proto.geo.GeoInfoReply.POSTAL}
 */
proto.geo.GeoInfoReply.prototype.getPostal = function() {
  return /** @type{?proto.geo.GeoInfoReply.POSTAL} */ (
    jspb.Message.getWrapperField(this, proto.geo.GeoInfoReply.POSTAL, 5));
};


/** @param {?proto.geo.GeoInfoReply.POSTAL|undefined} value */
proto.geo.GeoInfoReply.prototype.setPostal = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.geo.GeoInfoReply.prototype.clearPostal = function() {
  this.setPostal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geo.GeoInfoReply.prototype.hasPostal = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional REGISTERED_COUNTRY registered_country = 6;
 * @return {?proto.geo.GeoInfoReply.REGISTERED_COUNTRY}
 */
proto.geo.GeoInfoReply.prototype.getRegisteredCountry = function() {
  return /** @type{?proto.geo.GeoInfoReply.REGISTERED_COUNTRY} */ (
    jspb.Message.getWrapperField(this, proto.geo.GeoInfoReply.REGISTERED_COUNTRY, 6));
};


/** @param {?proto.geo.GeoInfoReply.REGISTERED_COUNTRY|undefined} value */
proto.geo.GeoInfoReply.prototype.setRegisteredCountry = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.geo.GeoInfoReply.prototype.clearRegisteredCountry = function() {
  this.setRegisteredCountry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.geo.GeoInfoReply.prototype.hasRegisteredCountry = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated SUBDIVISIONS subdivisions = 7;
 * @return {!Array.<!proto.geo.GeoInfoReply.SUBDIVISIONS>}
 */
proto.geo.GeoInfoReply.prototype.getSubdivisionsList = function() {
  return /** @type{!Array.<!proto.geo.GeoInfoReply.SUBDIVISIONS>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.geo.GeoInfoReply.SUBDIVISIONS, 7));
};


/** @param {!Array.<!proto.geo.GeoInfoReply.SUBDIVISIONS>} value */
proto.geo.GeoInfoReply.prototype.setSubdivisionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.geo.GeoInfoReply.SUBDIVISIONS=} opt_value
 * @param {number=} opt_index
 * @return {!proto.geo.GeoInfoReply.SUBDIVISIONS}
 */
proto.geo.GeoInfoReply.prototype.addSubdivisions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.geo.GeoInfoReply.SUBDIVISIONS, opt_index);
};


proto.geo.GeoInfoReply.prototype.clearSubdivisionsList = function() {
  this.setSubdivisionsList([]);
};


goog.object.extend(exports, proto.geo);
